/**
 *  Quafe - Eve tools for linux.
 *  Copyright (C) 2012 Christoph Nikic
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef QUAFE_PLUGIN_CONFIG_H_
#define QUAFE_PLUGIN_CONFIG_H_

#define QUAFE_PLUGIN_PREFIX "@QUAFE_PREFIX@"

#define QUAFE_PLUGIN_BUILD_RELEASE @QUAFE_PLUGIN_BUILD_RELEASE@
#define HAVE_LOG4CXX @LOG4CXX_FOUND@

#define QUAFE_DELETE(ptr); if(ptr) {delete ptr; ptr=0;}

#if HAVE_LOG4CXX
#	include <log4cxx/logger.h>
#
#	if QUAFE_PLUGIN_BUILD_RELEASE
#		define LOG_LEVEL ::log4cxx::Level::INFO_INT
#		define LOG_TRACE(message)
#		define LOG_DEBUG(message)
#	else
#		define LOG_LEVEL ::log4cxx::Level::ALL_INT
#		define LOG_TRACE(message) { \
    	    if (LOG4CXX_UNLIKELY(staticLogger->isTraceEnabled())) {\
				::log4cxx::helpers::MessageBuffer oss_; \
				staticLogger->forcedLog(::log4cxx::Level::getTrace(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
#		define LOG_DEBUG(message) { \
    	    if (LOG4CXX_UNLIKELY(staticLogger->isDebugEnabled())) {\
				::log4cxx::helpers::MessageBuffer oss_; \
				staticLogger->forcedLog(::log4cxx::Level::getDebug(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
#	endif
#	define LOG_INFO(message) { \
	        if (staticLogger->isInfoEnabled()) {\
	           ::log4cxx::helpers::MessageBuffer oss_; \
	           staticLogger->forcedLog(::log4cxx::Level::getInfo(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
#	define LOG_WARN(message) { \
	        if (staticLogger->isWarnEnabled()) {\
	           ::log4cxx::helpers::MessageBuffer oss_; \
	           staticLogger->forcedLog(::log4cxx::Level::getWarn(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
#	define LOG_ERROR(message) { \
	        if (staticLogger->isErrorEnabled()) {\
	           ::log4cxx::helpers::MessageBuffer oss_; \
	           staticLogger->forcedLog(::log4cxx::Level::getError(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
#	define LOG_FATAL(message) { \
	        if (logger->isFatalEnabled()) {\
	           ::log4cxx::helpers::MessageBuffer oss_; \
	           staticLogger->forcedLog(::log4cxx::Level::getFatal(), oss_.str(oss_ << message), LOG4CXX_LOCATION); }}
	
#	define QUAFE_DECLARE_STATIC_LOGGER(domain) ::log4cxx::LoggerPtr staticLogger(::log4cxx::Logger::getLogger(domain));

#else
#	define LOG_LEVEL
#	define LOG_TRACE(message)
#	define LOG_DEBUG(message)
#	define LOG_INFO(message)
#	define LOG_WARN(message)
#	define LOG_ERROR(message)
#	define LOG_FATAL(message)
#	define QUAFE_DECLARE_STATIC_LOGGER
#endif /* HAVE_LOG4CXX */

#endif /* QUAFE_PLUGIN_CONFIG_H_ */
